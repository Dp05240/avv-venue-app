generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   // "owner" or "manager"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  venues    Venue[]
}

model Venue {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryItems InventoryItem[]
  categories     InventoryCategory[]
}

model InventoryCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  venueId     Int
  venue       Venue    @relation(fields: [venueId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items InventoryItem[]
}

model InventoryItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  sku         String   @unique
  categoryId  Int
  category    InventoryCategory @relation(fields: [categoryId], references: [id])
  venueId     Int
  venue       Venue    @relation(fields: [venueId], references: [id])
  quantity    Int      @default(0)
  minQuantity Int      @default(0)
  maxQuantity Int?
  unitPrice   Float    @default(0)
  unit        String   @default("piece") // piece, kg, liter, etc.
  location    String?  // storage location
  supplier    String?
  supplierContact String?
  lastRestocked DateTime?
  expiryDate  DateTime?
  status      String   @default("active") // active, inactive, discontinued
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions InventoryTransaction[]
}

model InventoryTransaction {
  id        Int      @id @default(autoincrement())
  itemId    Int
  item      InventoryItem @relation(fields: [itemId], references: [id])
  type      String   // "in", "out", "adjustment", "damage", "expiry"
  quantity  Int
  previousQuantity Int
  newQuantity Int
  reason    String?
  reference String?  // PO number, booking ID, etc.
  notes     String?
  performedBy String
  createdAt DateTime @default(now())
}

model InventoryAlert {
  id        Int      @id @default(autoincrement())
  itemId    Int
  item      InventoryItem @relation(fields: [itemId], references: [id])
  type      String   // "low_stock", "expiry", "overstock"
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}